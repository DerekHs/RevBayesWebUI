{"ast":null,"code":"import _objectWithoutProperties from \"/home/maxsypher/gitclones/RevBayesWebUI/RevBayesWebUI/templates/static/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"/home/maxsypher/gitclones/RevBayesWebUI/RevBayesWebUI/templates/static/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/maxsypher/gitclones/RevBayesWebUI/RevBayesWebUI/templates/static/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nimport { ADD_ANIMAL, ADD_CONSTRAINT, REMOVE_CONSTRAINT } from '../actions/actions.js';\nvar initialState = {\n  species: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n  treeConstraints: {},\n  dataPartition: \"\"\n};\n\nvar appState = function appState() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_ANIMAL:\n      return _objectSpread({}, state, {\n        species: state.species.concat(action.animal)\n      });\n\n    case ADD_CONSTRAINT:\n      return _objectSpread({}, state, {\n        treeConstraints: _objectSpread({}, state.treeConstraints, _defineProperty({}, action.name, action.constraint))\n      });\n\n    case REMOVE_CONSTRAINT:\n      var _state$treeConstraint = state.treeConstraints,\n          value = _state$treeConstraint[action.name],\n          withoutFirst = _objectWithoutProperties(_state$treeConstraint, [action.name].map(_toPropertyKey));\n\n      return _objectSpread({}, state, {\n        treeConstraints: withoutFirst\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default appState;","map":{"version":3,"sources":["/home/maxsypher/gitclones/RevBayesWebUI/RevBayesWebUI/templates/static/src/reducers/appState.js"],"names":["ADD_ANIMAL","ADD_CONSTRAINT","REMOVE_CONSTRAINT","initialState","species","treeConstraints","dataPartition","appState","state","action","type","concat","animal","name","constraint","value","withoutFirst"],"mappings":";;;;;;;;AAAA,SAASA,UAAT,EAAqBC,cAArB,EAAqCC,iBAArC,QAA8D,uBAA9D;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD,EAA6D,GAA7D,EAAkE,GAAlE,EAAuE,GAAvE,EAA4E,GAA5E,EAAiF,GAAjF,EAAsF,GAAtF,EAA2F,GAA3F,EAAgG,GAAhG,EAAqG,GAArG,EAA0G,GAA1G,EAA+G,GAA/G,EAAoH,GAApH,EAAyH,GAAzH,EAA8H,GAA9H,CADU;AAEnBC,EAAAA,eAAe,EAAG,EAFC;AAInBC,EAAAA,aAAa,EAAE;AAJI,CAArB;;AAOA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBL,YAAyB;AAAA,MAAXM,MAAW;;AACjD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,UAAL;AACE,+BAAWQ,KAAX;AAAkBJ,QAAAA,OAAO,EAAEI,KAAK,CAACJ,OAAN,CAAcO,MAAd,CAAqBF,MAAM,CAACG,MAA5B;AAA3B;;AACF,SAAKX,cAAL;AACE,+BAAWO,KAAX;AAAkBH,QAAAA,eAAe,oBAAMG,KAAK,CAACH,eAAZ,sBAA8BI,MAAM,CAACI,IAArC,EAA4CJ,MAAM,CAACK,UAAnD;AAAjC;;AACF,SAAKZ,iBAAL;AAAA,kCACoDM,KAAK,CAACH,eAD1D;AAAA,UACyBU,KADzB,yBACWN,MAAM,CAACI,IADlB;AAAA,UACmCG,YADnC,oDACWP,MAAM,CAACI,IADlB;;AAEE,+BAAWL,KAAX;AAAkBH,QAAAA,eAAe,EAAEW;AAAnC;;AAEF;AACE,aAAOR,KAAP;AAVJ;AAcD,CAfD;;AAgBA,eAAeD,QAAf","sourcesContent":["import { ADD_ANIMAL, ADD_CONSTRAINT, REMOVE_CONSTRAINT } from '../actions/actions.js';\n\nconst initialState = {\n  species: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n  treeConstraints : {\n  },\n  dataPartition: \"\"\n}\n\nconst appState = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_ANIMAL: \n      return {...state, species: state.species.concat(action.animal)}    \n    case ADD_CONSTRAINT:\n      return {...state, treeConstraints: {...state.treeConstraints, [action.name]: action.constraint}}\n    case REMOVE_CONSTRAINT:\n      const { [action.name]: value, ...withoutFirst } = state.treeConstraints;\n      return {...state, treeConstraints: withoutFirst}\n    \n    default: \n      return state;\n  }\n  \n  \n}\nexport default appState;\n\n"]},"metadata":{},"sourceType":"module"}