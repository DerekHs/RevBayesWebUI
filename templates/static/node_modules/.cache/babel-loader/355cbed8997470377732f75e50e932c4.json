{"ast":null,"code":"import _toConsumableArray from \"/home/maxsypher/gitclones/RevBayesWebUI/RevBayesWebUI/templates/static/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/maxsypher/gitclones/RevBayesWebUI/RevBayesWebUI/templates/static/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nexport function resetData(species) {\n  var data = {\n    speciesList: {},\n    columns: {\n      'column-1': {\n        id: 'column-1',\n        title: \"Partition Left\",\n        speciesId: species\n      },\n      'column-2': {\n        id: 'column-2',\n        title: \"Partition Right\",\n        speciesId: []\n      }\n    },\n    columnsort: ['column-1', 'column-2']\n  };\n  species.map(function (name) {\n    return data.speciesList[name] = {\n      'id': name,\n      'name': name\n    };\n  });\n  return data;\n}\nexport function handleConstraintClick(itemIds, source, destination, columns) {\n  var col = _objectSpread({}, columns);\n\n  var newSource = _objectSpread({}, source);\n\n  var newDestination = _objectSpread({}, destination);\n\n  for (var i = 0; i < itemIds.length; i++) {\n    var itemIndex = newSource['speciesId'].indexOf(itemIds[i]);\n    newSource = _objectSpread({}, newSource, {\n      'speciesId': [].concat(_toConsumableArray(newSource['speciesId'].slice(0, itemIndex)), _toConsumableArray(newSource['speciesId'].slice(itemIndex + 1)))\n    });\n    newDestination = _objectSpread({}, newDestination, {\n      'speciesId': [].concat(_toConsumableArray(newDestination['speciesId'].slice(0, itemIndex)), [itemIds[i]], _toConsumableArray(newDestination['speciesId'].slice(itemIndex)))\n    });\n\n    if (source.id === 'column-1') {\n      col = _objectSpread({}, col, {\n        'column-1': newSource,\n        'column-2': newDestination\n      });\n    } else if (source.id === 'column-2') {\n      col = _objectSpread({}, col, {\n        'column-1': newDestination,\n        'column-2': newSource\n      });\n    }\n  }\n\n  return col;\n}","map":{"version":3,"sources":["/home/maxsypher/gitclones/RevBayesWebUI/RevBayesWebUI/templates/static/src/components/treeConstraints/helperFunction.js"],"names":["resetData","species","data","speciesList","columns","id","title","speciesId","columnsort","map","name","handleConstraintClick","itemIds","source","destination","col","newSource","newDestination","i","length","itemIndex","indexOf","slice"],"mappings":";;AAAA,OAAO,SAASA,SAAT,CAAmBC,OAAnB,EAA4B;AAC/B,MAAMC,IAAI,GAAG;AACTC,IAAAA,WAAW,EAAE,EADJ;AAITC,IAAAA,OAAO,EAAE;AACL,kBAAY;AACRC,QAAAA,EAAE,EAAE,UADI;AAERC,QAAAA,KAAK,EAAE,gBAFC;AAGRC,QAAAA,SAAS,EAAEN;AAHH,OADP;AAML,kBAAY;AACRI,QAAAA,EAAE,EAAE,UADI;AAERC,QAAAA,KAAK,EAAE,iBAFC;AAGRC,QAAAA,SAAS,EAAE;AAHH;AANP,KAJA;AAgBTC,IAAAA,UAAU,EAAE,CAAC,UAAD,EAAa,UAAb;AAhBH,GAAb;AAkBAP,EAAAA,OAAO,CAACQ,GAAR,CAAY,UAAAC,IAAI;AAAA,WAAIR,IAAI,CAACC,WAAL,CAAiBO,IAAjB,IAChB;AACI,YAAMA,IADV;AAEI,cAAQA;AAFZ,KADY;AAAA,GAAhB;AAMA,SAAOR,IAAP;AACH;AAED,OAAO,SAASS,qBAAT,CAA+BC,OAA/B,EAAwCC,MAAxC,EAAgDC,WAAhD,EAA6DV,OAA7D,EAAsE;AACzE,MAAIW,GAAG,qBAAOX,OAAP,CAAP;;AACA,MAAIY,SAAS,qBAAOH,MAAP,CAAb;;AACA,MAAII,cAAc,qBAAOH,WAAP,CAAlB;;AAEA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,OAAO,CAACO,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AAErC,QAAIE,SAAS,GAAGJ,SAAS,CAAC,WAAD,CAAT,CAAuBK,OAAvB,CAA+BT,OAAO,CAACM,CAAD,CAAtC,CAAhB;AACAF,IAAAA,SAAS,qBAAOA,SAAP;AACL,gDAAiBA,SAAS,CAAC,WAAD,CAAT,CAAuBM,KAAvB,CAA6B,CAA7B,EAAgCF,SAAhC,CAAjB,sBACGJ,SAAS,CAAC,WAAD,CAAT,CAAuBM,KAAvB,CAA6BF,SAAS,GAAG,CAAzC,CADH;AADK,MAAT;AAMAH,IAAAA,cAAc,qBAAOA,cAAP;AACV,gDACOA,cAAc,CAAC,WAAD,CAAd,CAA4BK,KAA5B,CAAkC,CAAlC,EAAqCF,SAArC,CADP,IAEIR,OAAO,CAACM,CAAD,CAFX,sBAGOD,cAAc,CAAC,WAAD,CAAd,CAA4BK,KAA5B,CAAkCF,SAAlC,CAHP;AADU,MAAd;;AAMA,QAAIP,MAAM,CAACR,EAAP,KAAc,UAAlB,EAA8B;AAC1BU,MAAAA,GAAG,qBAAOA,GAAP;AAAY,oBAAYC,SAAxB;AAAmC,oBAAYC;AAA/C,QAAH;AACH,KAFD,MAEO,IAAIJ,MAAM,CAACR,EAAP,KAAc,UAAlB,EAA8B;AACjCU,MAAAA,GAAG,qBAAOA,GAAP;AAAY,oBAAYE,cAAxB;AAAwC,oBAAYD;AAApD,QAAH;AACH;AACJ;;AAGD,SAAOD,GAAP;AACH","sourcesContent":["export function resetData(species) {\n    const data = {\n        speciesList: {\n            \n        },\n        columns: {\n            'column-1': {\n                id: 'column-1',\n                title: \"Partition Left\",\n                speciesId: species\n            },\n            'column-2': {\n                id: 'column-2',\n                title: \"Partition Right\",\n                speciesId: []\n            }\n        },\n        columnsort: ['column-1', 'column-2']\n    }\n    species.map(name => data.speciesList[name] =\n        {\n            'id': name,\n            'name': name\n        }\n    )\n    return data\n}\n\nexport function handleConstraintClick(itemIds, source, destination, columns) {\n    var col = {...columns}\n    var newSource = {...source}\n    var newDestination = {...destination}\n    \n    for (var i = 0; i < itemIds.length; i++) {\n        \n        let itemIndex = newSource['speciesId'].indexOf(itemIds[i])\n        newSource = {...newSource,\n            'speciesId': [...newSource['speciesId'].slice(0, itemIndex), \n            ...newSource['speciesId'].slice(itemIndex + 1)]\n        }\n        \n        \n        newDestination = {...newDestination,\n            'speciesId': [\n                ...newDestination['speciesId'].slice(0, itemIndex),\n                itemIds[i],\n                ...newDestination['speciesId'].slice(itemIndex)\n            ]}\n        if (source.id === 'column-1') {\n            col = {...col, 'column-1': newSource, 'column-2': newDestination}\n        } else if (source.id === 'column-2') {\n            col = {...col, 'column-1': newDestination, 'column-2': newSource}\n        }\n    }   \n    \n    \n    return col \n}"]},"metadata":{},"sourceType":"module"}